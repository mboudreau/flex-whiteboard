<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<spark:BorderContainerSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
                            xmlns:s="library://ns.adobe.com/flex/spark"
                            xmlns:spark="spark.skins.spark.*"
                            implements="mx.core.IRectangularBorder"
                            minWidth="120" minHeight="40"
                            alpha.disabled="0.5">

    <fx:Metadata>
        [HostComponent("org.apache.flex.utilities.developerToolSuite.presentation.graphic.component.Frame")]
    </fx:Metadata>

    <fx:Declarations>
        <s:State name="normal"/>
        <s:State name="disabled"/>
    </fx:Declarations>

    <fx:Script>
        <![CDATA[
        import mx.core.EdgeMetrics;
        import mx.core.IVisualElement;

        import org.apache.flex.utilities.developerToolSuite.presentation.graphic.component.Frame;

        import spark.components.BorderContainer;

        //--------------------------------------------------------------------------
        //
        //  Variables
        //
        //--------------------------------------------------------------------------

        /**
         * @private
         * Saves our label's previous textAlign value.
         */
        private var prevTextAlign:String;

        //--------------------------------------------------------------------------
        //
        //  Properties
        //
        //--------------------------------------------------------------------------

        //----------------------------------
        //  hostComponent
        //----------------------------------

        /**
         *  @private
         */
        private var _hostComponent:BorderContainer;

        /**
         *  @private
         */
        override public function set hostComponent(value:BorderContainer):void {
            if (_hostComponent) {
                _hostComponent.removeEventListener("labelChange", labelChangeChangeHandler);
            }

            _hostComponent = value;

            if (value) {
                _hostComponent.addEventListener("contentChange", labelChangeChangeHandler);
            }
        }

        /**
         *  @private
         */
        override public function get hostComponent():BorderContainer {
            return _hostComponent;
        }

        //--------------------------------------------------------------------------
        //
        //  Event Handlers
        //
        //--------------------------------------------------------------------------

        /**
         *  @private
         */
        protected function labelChangeChangeHandler(event:Event):void {
            // Ensure empty label is not included in layout else
            // a gap between icon and label would be applied.
            if (labelDisplay) {
                IVisualElement(labelDisplay).includeInLayout = labelDisplay.text != null && labelDisplay.text.length;
            }
        }

        /* Define the skin elements that should not be colorized. */
        static private const exclusions:Array = ["background", "labelDisplay"];

        /**
         * @private
         */
        public function get colorizeExclusions():Array {
            return exclusions;
        }

        static private const metrics:EdgeMetrics = new EdgeMetrics(1, 1, 1, 1);

        /**
         * @private
         */
        public function get borderMetrics():EdgeMetrics {
            if (getStyle("borderVisible") == false || getStyle("borderStyle") == "none") {
                return EdgeMetrics.EMPTY;
            }

            return metrics;
        }

        /**
         * @private
         */
        public function get backgroundImageBounds():Rectangle {
            return null;
        }

        /**
         * @private
         */
        public function set backgroundImageBounds(value:Rectangle):void {

        }

        /**
         * @private
         */
        public function get hasBackgroundImage():Boolean {
            return false;
        }

        /**
         * @private
         */
        public function layoutBackgroundImage():void {

        }

        override protected function commitProperties():void {
            super.commitProperties();
            labelBackground.visible = labelDisplay.visible = Frame(hostComponent).showLabel;
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);

            if (labelDisplay && labelDisplay.visible) {
                labelDisplay.y = 0;
                labelDisplay.x = (hostComponent.width - labelDisplay.width) / 2;

                labelBackground.x = labelDisplay.x - 2;
                labelBackground.width = labelDisplay.width + 4;
                labelBackground.height = labelDisplay.height;
            }
        }
        ]]>
    </fx:Script>

    <!-- fill -->
    <!--- @private -->
    <s:Rect id="background" left="0" right="0" top="0" bottom="0" radiusX="0">
        <s:fill>
            <!--- @private -->
            <s:SolidColor id="bgFill" color="0xFFFFFF"/>
        </s:fill>
    </s:Rect>

    <!-- border -->
    <!--- @private -->
    <s:Rect left="4" right="4" top="4" bottom="4" radiusX="0" id="border">
        <s:stroke>
            <!--- @private -->
            <s:SolidColorStroke id="borderStroke"/>
        </s:stroke>
    </s:Rect>


    <!-- fill -->
    <!--- @private -->
    <s:Rect id="labelBackground" radiusX="0">
        <s:fill>
            <!--- @private -->
            <s:SolidColor color="{bgFill.color}"/>
        </s:fill>
    </s:Rect>

    <!-- labelDisplay -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
    <s:Label id="labelDisplay"
             textAlign="center"
             maxDisplayedLines="1" maxWidth="{border.width - 4}"
             horizontalCenter="0" verticalCenter="1" verticalAlign="top">
    </s:Label>
</spark:BorderContainerSkin>
