////////////////////////////////////////////////////////////////////////////////
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

package spark.components.calendarClasses
{
 
import spark.components.DateChooser;
import spark.components.MonthGrid;

/**
 *  This interface provides a method that dynamically created visual
 *  elements in the date selector can use to configure themselves before they're displayed.
 *  It's called as needed when a factory generated visual element
 *  is created or reused.  It is not intended to be called directly.
 * 
 *  <p>This is an optional interface for all of the factory-generated
 *  visual elements: <code>columnSeparator</code>, <code>hoverIndicator</code>, 
 *  <code>rowSeparator</code>, <code>selectionIndicator</code>, and <code>todayIndicator</code>.
 *  It's typically used to configure generated visual elements with
 *  DateChooser's style values.  For example, to use the value of the
 *  DateChooser's "todayColor" style for the today indicator's fill color,
 *  one would define the <code>prepareDateVisualElement()</code>
 *  method like this:</p> 
 * 
 *  <p>
 *  <pre>
 *  public function prepareDateSelectorVisualElement(monthGrid:MonthGrid):void
 *  {
 *      todayIndicatorFill.color = monthGrid.getStyle("todayColor");
 *  }
 *  </pre>
 *  </p>        
 * 
 *  <p>There are many more examples like this in DateChooserSkin.mxml.  
 *  Note that custom DateChooser skin visual elements can choose not to implement this interface 
 *  if the the added flexibility isn't needed.</p>
 * 
 *  @langversion 3.0
 *  @playerversion Flash 11
 *  @playerversion AIR 3.0
 *  @productversion Flex 5.0
 */
public interface IMonthGridVisualElement
{    
    /** 
     *  This method is called before a visual element of the MonthGrid is rendered to give the 
     *  element a chance to configure itself. 
     *  
     *  <p>The <code>rowIndex</code> and <code>columnIndex</code> parameters specify the 
     *  the cell the visual element will occupy.  If <code>columnIndex</code> = -1 then the visual 
     *  element occupies a row. If <code>rowIndex</code> = -1 then the visual element occupies
     *  a column.  
     *  If the visual element is a separator, it is before the renderer at the given
     *  <code>rowIndex</code> or <code>columnIndex</code>.</p>
     * 
     * The method's parameters specify what 
     *  row (if columnIndex = -1), or column (if rowIndex = -1) the visual element will occupy.
     * 
     *  <p>If the visual element is generated by a factory valued
     *  DateChooser skin part, like selectionIndicator or hoverIndicator,
     *  then <code>monthGrid.dateChooser</code> will be the DateChooser for which
     *  monthGrid is a skin part.</p>
     * 
     * <p>You can use <code>monthGrid.getDateItemRenderer(rowIndex, columnIndex)</code> to
     *  access the renderer at this location.</p>
     * 
     *  @param monthGrid The MonthGrid associated with this visual element.
     *  @param rowIndex The row coordinate of the cell the visual element will occupy, or -1
     *  @param columnIndex The column coordinate of the cell the visual element will occupy, or -1
     * 
     *  @langversion 3.0
     *  @playerversion Flash 11
     *  @playerversion AIR 3.0
     *  @productversion Flex 5.0
     */
    function prepareMonthGridVisualElement(monthGrid:MonthGrid, rowIndex:int, columnIndex:int):void; 

}
}