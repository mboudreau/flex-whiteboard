<?xml version="1.0" encoding="utf-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--- The default skin class for Spark DateChooser component.  

@see spark.components.DateChooser

*  @langversion 3.0
*  @playerversion Flash 11
*  @playerversion AIR 3.0
*  @productversion Flex 5.0
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
             alpha.disabled="0.5" blendMode="normal"> 
    
    <!-- FIXME: needs minWidth and minHeight -->
    
    <fx:Metadata>
        <![CDATA[ 
        /** 
        * @copy spark.skins.spark.ApplicationSkin#hostComponent
        */
        [HostComponent("spark.components.DateChooser")]
        ]]>
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
        <![CDATA[
            import mx.collections.IList;
            import mx.core.FlexVersion;
           
            import spark.components.DateChooser;
            import spark.components.calendarClasses.MonthArrayList;
            
            /* Define the skin elements that should not be colorized. */
            static private const exclusions:Array = ["background", "headerBackground", "scroller"];
                       
            /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
            static private const contentFill:Array = ["bgFill"];
                       
            /**
             * @private
             */
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             *  @private
             */
            override public function get contentItems():Array {return contentFill};
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                if (getStyle("borderVisible") == true)
                {
                    border.visible = true;
                    background.left = background.top = background.right = background.bottom = 1;
                }
                else
                {
                    border.visible = false;
                    background.left = background.top = background.right = background.bottom = 0;
                }
                
                //border.color = getStyle("borderColor");
                border.alpha = getStyle("borderAlpha");
                                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }           
        ]]>
    </fx:Script>
    
    <fx:Script>
        <![CDATA[
            /** 
             * @private 
             */     
            private static const focusExclusions:Array = [];
            
            /**
             *  @private
             */
            override public function get focusSkinExclusions():Array { return focusExclusions;};
        ]]>
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
    <fx:Declarations>       
        <!--- @private -->        
        <fx:Component id="caretIndicator">
            <s:Rect implements="spark.components.calendarClasses.IMonthGridVisualElement">
                <fx:Script>
                    <![CDATA[
                        import spark.components.MonthGrid;
                        import spark.components.calendarClasses.IDateItemRenderer;
                        
                        /**
                         * @private
                         */
                        public function prepareMonthGridVisualElement(monthGrid:MonthGrid, rowIndex:int, columnIndex:int):void
                        {
                            if (!monthGrid)
                                return;
                            
                            const color:uint = monthGrid.getStyle("caretColor");
                            caretIndicatorFill.color = color;
                        }
                    ]]>
                </fx:Script>
                <s:stroke>
                    <!--- @privat -->
                    <s:SolidColorStroke id="caretIndicatorFill" color="0x0167FF" weight="1"/>
                </s:stroke>
            </s:Rect>
        </fx:Component>
        
        <!--- @private -->
        <fx:Component id="columnSeparator">
            <s:Line>
                 <s:stroke>
                    <s:SolidColorStroke color="0xE6E6E6" weight="1" caps="square"/>
                </s:stroke>
            </s:Line>
        </fx:Component>
        
        <!--- @private -->
        <fx:Component id="hoverIndicator">
            <s:Rect implements="spark.components.calendarClasses.IMonthGridVisualElement">
                <fx:Script>
                    <![CDATA[
                        import spark.components.MonthGrid;
                        import spark.components.calendarClasses.IDateItemRenderer;
                        
                        /**
                         * @private
                         */
                        public function prepareMonthGridVisualElement(monthGrid:MonthGrid, rowIndex:int, columnIndex:int):void
                        {
                            if (!monthGrid)
                                return;
                            
                            const color:uint = monthGrid.getStyle("rollOverColor");
                            hoverIndicatorFill.color = color;
                        }
                    ]]>
                </fx:Script>                
                <s:fill>
                    <!--- @private -->
                    <s:SolidColor id="hoverIndicatorFill" color="0xCEDBEF" alpha="1"/>
                </s:fill>
            </s:Rect>
        </fx:Component>
        
        <!--- @private -->
        <fx:Component id="selectionIndicator">
            <s:Rect implements="spark.components.calendarClasses.IMonthGridVisualElement">
                <fx:Script>
                    <![CDATA[
                        import spark.components.MonthGrid;
                        import spark.components.calendarClasses.IDateItemRenderer;
                        
                        /**
                         * @private
                         */
                        public function prepareMonthGridVisualElement(monthGrid:MonthGrid, rowIndex:int, columnIndex:int):void
                        {
                            if (!monthGrid)
                                return;
                                                        
                            const color:uint = monthGrid.getStyle("selectionColor");
                            selectionIndicatorFill.color = color;
                        }
                    ]]>
                </fx:Script>                
                <s:fill>
                    <!--- @private -->
                    <s:SolidColor id="selectionIndicatorFill" color="0xA8C6EE" alpha="1"/>
                </s:fill>                
            </s:Rect>
        </fx:Component>
        
        <!--- @private -->
        <fx:Component id="rowSeparator" >
            <s:Line>
                <s:stroke>
                    <s:SolidColorStroke color="0xE6E6E6" weight="1" caps="square"/>
                </s:stroke>
            </s:Line>
        </fx:Component>
        
        <!--- @private -->
        <fx:Component id="todayIndicator">
            <s:Rect implements="spark.components.calendarClasses.IMonthGridVisualElement">
                <fx:Script>
                    <![CDATA[
                        import spark.components.MonthGrid;
                        import spark.components.calendarClasses.IDateItemRenderer;
                        
                        /**
                         * @private
                         */
                        public function prepareMonthGridVisualElement(monthGrid:MonthGrid, rowIndex:int, columnIndex:int):void
                        {
                            if (!monthGrid)
                                return;
                            
                            const color:uint = monthGrid.getStyle("todayColor");
                            todayIndicatorFill.color = color;
                        }
                    ]]>
                </fx:Script> 
                <s:stroke>
                    <s:SolidColorStroke color="0x00000" weight="1" alpha="0.2"/>
                </s:stroke>
                <s:fill>
                    <!--- Defines the color of the background. -->
                    <s:SolidColor id="todayIndicatorFill" color="0xF9EB21" alpha="0.2"/>
                </s:fill>
           </s:Rect>
        </fx:Component> 
        
        <!--- @private -->
         <fx:Component id="weekOrientationRowsLayout">
            <s:HorizontalLayout requestedColumnCount="1" useVirtualLayout="true" 
                                variableColumnWidth="false" verticalAlign="justify"/>
        </fx:Component>
        
        <!--- @private -->
        <fx:Component id="weekOrientationColumnsLayout">
            <s:VerticalLayout requestedRowCount="1" useVirtualLayout="true"
                              variableRowHeight="false" horizontalAlign="justify"/>
        </fx:Component> 
                
    </fx:Declarations>
     
    <s:Rect id="border" left="0" right="0" top="0" bottom="0">
        <s:fill>
            <s:LinearGradient x="{border.width/2}" y="0" scaleX="{border.height}" rotation="90">
                <s:GradientEntry ratio="0" color="#B3B3B3"/>
                <s:GradientEntry ratio="1" color="#808080"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
    
    <s:Rect id="background" left="1" right="1" top="1" bottom="1">
        <s:fill>
            <s:SolidColor id="bgFill" color="#F4F4F4"/>
        </s:fill>
    </s:Rect>
        
    <s:Group width="100%" height="100%" clipAndEnableScrolling="true">
        <s:Group id="header" width="100%">
            <s:Rect id="headerBackground" left="1" right="1" top="1" bottom="1">
                <s:fill>
                    <s:LinearGradient x="{headerBackground.width/2}" y="0" 
                                      scaleX="{headerBackground.height}" rotation="90">
                        <s:GradientEntry ratio="0" color="#FCFCFC"/>
                        <s:GradientEntry ratio="1" color="#D8D8D8"/>
                    </s:LinearGradient>
                </s:fill>
            </s:Rect>
            
            <s:Rect id="headerDiv" left="1" right="1" bottom="1" height="1">
                <s:fill>
                    <s:SolidColor color="#999999"/>
                </s:fill>
            </s:Rect>
            
            <s:Group left="3" right="3" top="5" bottom="5">                
                <s:Button id="previousMonthButton" left="0"
                          focusEnabled="false" autoRepeat="true" 
                          skinClass="spark.skins.spark.DateChooserPreviousMonthButtonSkin"/>
                
                <s:HGroup id="headerGroup" horizontalCenter="0" gap="2">
                    <s:DropDownList id="monthDropDownList" focusEnabled="false"
                                    requireSelection="true"
                                    skinClass="spark.skins.spark.DateChooserMonthDropDownListSkin"/>
                    
                    <s:ComboBox id="yearDropDownListBase" restrict="0-9" maxChars="4"
                                skinClass="spark.skins.spark.DateChooserYearComboBoxSkin"/>
                </s:HGroup>
                
                <s:Button id="nextMonthButton" right="0"
                          focusEnabled="false" autoRepeat="true" 
                          skinClass="spark.skins.spark.DateChooserNextMonthButtonSkin"/>
            </s:Group>
        </s:Group>
        
        <!-- center the displayed month in the DateChooser -->
        
        <s:Scroller id="scroller" top="{header.height}" horizontalCenter="0"
                    minViewportInset="1" hasFocusableChildren="false" 
                    horizontalScrollPolicy="off" verticalScrollPolicy="off">
             <s:DataGroup id="dataGroup"
                         dataProvider="{new MonthArrayList()}"
                         itemRenderer="spark.skins.spark.MonthGridItemRenderer">
                 <!-- 
                      Layout is specified with weekOrientationRowsLayout and/or 
                      weekOrientationColumnsLayout skin parts.
                 -->
            </s:DataGroup>
        </s:Scroller>
    </s:Group>
</s:SparkSkin>
